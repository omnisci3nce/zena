// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: proto/zena_protocol.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Messenging_GetMessages_FullMethodName         = "/messaging.Messenging/GetMessages"
	Messenging_GetChannels_FullMethodName         = "/messaging.Messenging/GetChannels"
	Messenging_SendNewMessage_FullMethodName      = "/messaging.Messenging/SendNewMessage"
	Messenging_SubscribeToChannels_FullMethodName = "/messaging.Messenging/SubscribeToChannels"
)

// MessengingClient is the client API for Messenging service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessengingClient interface {
	GetMessages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Message], error)
	GetChannels(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Channel], error)
	SendNewMessage(ctx context.Context, in *NewMessage, opts ...grpc.CallOption) (*Message, error)
	SubscribeToChannels(ctx context.Context, in *ChannelIdList, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Message], error)
}

type messengingClient struct {
	cc grpc.ClientConnInterface
}

func NewMessengingClient(cc grpc.ClientConnInterface) MessengingClient {
	return &messengingClient{cc}
}

func (c *messengingClient) GetMessages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Message], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Messenging_ServiceDesc.Streams[0], Messenging_GetMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, Message]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Messenging_GetMessagesClient = grpc.ServerStreamingClient[Message]

func (c *messengingClient) GetChannels(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Channel], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Messenging_ServiceDesc.Streams[1], Messenging_GetChannels_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, Channel]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Messenging_GetChannelsClient = grpc.ServerStreamingClient[Channel]

func (c *messengingClient) SendNewMessage(ctx context.Context, in *NewMessage, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, Messenging_SendNewMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messengingClient) SubscribeToChannels(ctx context.Context, in *ChannelIdList, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Message], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Messenging_ServiceDesc.Streams[2], Messenging_SubscribeToChannels_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChannelIdList, Message]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Messenging_SubscribeToChannelsClient = grpc.ServerStreamingClient[Message]

// MessengingServer is the server API for Messenging service.
// All implementations must embed UnimplementedMessengingServer
// for forward compatibility.
type MessengingServer interface {
	GetMessages(*Empty, grpc.ServerStreamingServer[Message]) error
	GetChannels(*Empty, grpc.ServerStreamingServer[Channel]) error
	SendNewMessage(context.Context, *NewMessage) (*Message, error)
	SubscribeToChannels(*ChannelIdList, grpc.ServerStreamingServer[Message]) error
	mustEmbedUnimplementedMessengingServer()
}

// UnimplementedMessengingServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMessengingServer struct{}

func (UnimplementedMessengingServer) GetMessages(*Empty, grpc.ServerStreamingServer[Message]) error {
	return status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedMessengingServer) GetChannels(*Empty, grpc.ServerStreamingServer[Channel]) error {
	return status.Errorf(codes.Unimplemented, "method GetChannels not implemented")
}
func (UnimplementedMessengingServer) SendNewMessage(context.Context, *NewMessage) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNewMessage not implemented")
}
func (UnimplementedMessengingServer) SubscribeToChannels(*ChannelIdList, grpc.ServerStreamingServer[Message]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToChannels not implemented")
}
func (UnimplementedMessengingServer) mustEmbedUnimplementedMessengingServer() {}
func (UnimplementedMessengingServer) testEmbeddedByValue()                    {}

// UnsafeMessengingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessengingServer will
// result in compilation errors.
type UnsafeMessengingServer interface {
	mustEmbedUnimplementedMessengingServer()
}

func RegisterMessengingServer(s grpc.ServiceRegistrar, srv MessengingServer) {
	// If the following call pancis, it indicates UnimplementedMessengingServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Messenging_ServiceDesc, srv)
}

func _Messenging_GetMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessengingServer).GetMessages(m, &grpc.GenericServerStream[Empty, Message]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Messenging_GetMessagesServer = grpc.ServerStreamingServer[Message]

func _Messenging_GetChannels_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessengingServer).GetChannels(m, &grpc.GenericServerStream[Empty, Channel]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Messenging_GetChannelsServer = grpc.ServerStreamingServer[Channel]

func _Messenging_SendNewMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessengingServer).SendNewMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Messenging_SendNewMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessengingServer).SendNewMessage(ctx, req.(*NewMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messenging_SubscribeToChannels_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChannelIdList)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessengingServer).SubscribeToChannels(m, &grpc.GenericServerStream[ChannelIdList, Message]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Messenging_SubscribeToChannelsServer = grpc.ServerStreamingServer[Message]

// Messenging_ServiceDesc is the grpc.ServiceDesc for Messenging service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Messenging_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messaging.Messenging",
	HandlerType: (*MessengingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendNewMessage",
			Handler:    _Messenging_SendNewMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMessages",
			Handler:       _Messenging_GetMessages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetChannels",
			Handler:       _Messenging_GetChannels_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToChannels",
			Handler:       _Messenging_SubscribeToChannels_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/zena_protocol.proto",
}

const (
	Auth_Login_FullMethodName = "/messaging.Auth/Login"
)

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	Login(ctx context.Context, in *LoginDetails, opts ...grpc.CallOption) (*LoginResponse, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Login(ctx context.Context, in *LoginDetails, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, Auth_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility.
type AuthServer interface {
	Login(context.Context, *LoginDetails) (*LoginResponse, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServer struct{}

func (UnimplementedAuthServer) Login(context.Context, *LoginDetails) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}
func (UnimplementedAuthServer) testEmbeddedByValue()              {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	// If the following call pancis, it indicates UnimplementedAuthServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Login(ctx, req.(*LoginDetails))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messaging.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Auth_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/zena_protocol.proto",
}
